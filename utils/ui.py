# utils/ui.py
from __future__ import annotations
import math, json
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

import numpy as np
import pandas as pd
import folium
from folium.plugins import HeatMap
import streamlit as st

# ðŸ”’ constants (safe import; dairesel importu Ã¶nler)
try:
    from utils.constants import KEY_COL, CRIME_TYPES
except Exception:
    KEY_COL = "GEOID"
    CRIME_TYPES = []

from utils.forecast import pois_pi90

__all__ = [
    "SMALL_UI_CSS",
    "render_result_card",
    "build_map_fast",
    "render_kpi_row",
    "render_day_hour_heatmap",
    "title_with_help",
    "header_with_help",
    "subheader_with_help",
]

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ KÃœÃ‡ÃœK VE TUTARLI TÄ°POGRAFÄ° + LEAFLET DÃœZELTMESÄ° â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
SMALL_UI_CSS = """
<style>
/* === GENEL: tÃ¼m yazÄ±lar kÃ¼Ã§Ã¼k, satÄ±r aralÄ±ÄŸÄ± dar === */
html, body, [class*="css"] { font-size: 12px; line-height: 1.28; }

/* === BaÅŸlÄ±klar (yalnÄ±zca H1 bÃ¼yÃ¼k) === */
h1 { font-size: 1.9rem; line-height: 1.2; margin: .45rem 0 .35rem 0; }
h2 { font-size: .95rem;  margin: .25rem 0; }
h3 { font-size: .88rem;  margin: .18rem 0; }

/* === Ä°Ã§ boÅŸluklarÄ± sÄ±kÄ±laÅŸtÄ±r === */
section.main > div.block-container { padding-top: .55rem; padding-bottom: .10rem; }
[data-testid="stSidebar"] .block-container { padding-top: .25rem; padding-bottom: .25rem; }
div.element-container { margin-bottom: .22rem; }

/* === Form/label/yardÄ±m metinleri === */
label, .stMarkdown p, .stCaption, .stText, .stRadio, .stSelectbox, .stNumberInput { font-size: .82rem; }
small, .stCaption, .st-emotion-cache-1wbqy5l { font-size: .74rem; }

/* === Butonlar === */
.stButton > button, .stDownloadButton > button {
  font-size: .80rem; padding: 4px 10px; border-radius: 8px;
}

/* === Slider & input iÃ§erikleri === */
[data-testid="stSlider"] { padding-top: .10rem; padding-bottom: .05rem; }
input, textarea { font-size: .80rem !important; }

/* === Metric kartlarÄ± (genel) === */
[data-testid="stMetricValue"] { font-size: .95rem; }
[data-testid="stMetricLabel"] { font-size: .68rem; color:#666; }
[data-testid="stMetric"]      { padding: .06rem 0 .02rem 0; }

/* st.metric ellipsis dÃ¼zeltmesi */
[data-testid="stMetricLabel"] p{
  max-width:none !important; overflow:visible !important; text-overflow:clip !important;
  white-space:nowrap !important; margin:0 !important;
}

/* Risk Ã–zeti bloÄŸu (bir tÄ±k daha kÃ¼Ã§Ã¼k) */
#risk-ozet [data-testid="stMetricValue"] { font-size: .90rem; line-height: 1.0; }
#risk-ozet [data-testid="stMetricLabel"] { font-size: .64rem; color:#6b7280; }
#risk-ozet [data-testid="stMetric"]      { padding: .04rem 0 .01rem 0; }

/* === Tablo/DataFrame (baÅŸlÄ±k + gÃ¶vde aynÄ± boy) === */
[data-testid="stDataFrame"] { font-size: .72rem; }
[data-testid="stDataFrame"] thead,
[data-testid="stDataFrame"] th,
[data-testid="stDataFrame"] td {
  font-size: .72rem; line-height: 1.15; padding-top: 4px; padding-bottom: 4px;
}
[data-testid="stElementToolbar"] button { transform: scale(.90); }

/* === Expander baÅŸlÄ±klarÄ± === */
.st-expanderHeader, [data-baseweb="accordion"] { font-size: .80rem; }

/* === Radio/checkbox aralÄ±klarÄ±nÄ± daralt === */
.stRadio > label, .stCheckbox > label { margin-bottom: .08rem; }

/* === Ãœst menÃ¼/footer (isteÄŸe baÄŸlÄ±) === */
#MainMenu { visibility: hidden; }
footer { visibility: hidden; }

/* === Ã–zel KPI kartÄ± (tooltip destekli) === */
.kpi{display:flex;flex-direction:column;gap:2px}
.kpi-label{font-size:.68rem;color:#6b7280}
.kpi-value{font-size:.95rem;font-weight:600}

/* === Title/Subtitle yardÄ±m rozeti === */
.title-help{display:inline-flex;align-items:center;gap:6px}
.title-help .hint{
  display:inline-block;width:14px;height:14px;border-radius:50%;
  background:#e5e7eb;color:#111;text-align:center;line-height:14px;
  font-size:10px;font-weight:700;cursor:help;
}
.title-help .text{border-bottom:1px dotted #9ca3af}

/* === Leaflet kontrol/atÄ±f gÃ¶rÃ¼nÃ¼rlÃ¼k dÃ¼zeltmesi === */
.leaflet-control-container{display:block!important}
.leaflet-control-attribution{display:block!important;opacity:.95}
</style>
"""

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ BaÅŸlÄ±k + mini aÃ§Ä±klama yardÄ±mcÄ±larÄ± â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def title_with_help(level: int, text: str, help_text: str | None = None):
    """level=1/2/3 â†’ h1/h2/h3. Hover'da kÃ¼Ã§Ã¼k aÃ§Ä±klama iÃ§in title attr."""
    tag = f"h{max(1, min(level, 3))}"
    if help_text:
        text_html = f'<span class="text" title="{help_text}">{text}</span>'
        hint_html = f'<span class="hint" title="{help_text}">i</span>'
    else:
        text_html = f'<span class="text">{text}</span>'
        hint_html = ""
    st.markdown(f'<{tag} class="title-help">{text_html}{hint_html}</{tag}>', unsafe_allow_html=True)

def header_with_help(text: str, help_text: str | None = None):
    title_with_help(2, text, help_text)

def subheader_with_help(text: str, help_text: str | None = None):
    title_with_help(3, text, help_text)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ KPI satÄ±rÄ± â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def render_kpi_row(items: list[tuple[str, str | float, str]]):
    """items = [(label, value, tooltip), ...]. Tooltip tarayÄ±cÄ± 'title' ile gÃ¶sterilir."""
    cols = st.columns(len(items))
    for col, (label, value, tip) in zip(cols, items):
        col.markdown(
            f"""<div class="kpi" title="{tip}">
                   <div class="kpi-label">{label}</div>
                   <div class="kpi-value">{value}</div>
                </div>""",
            unsafe_allow_html=True,
        )

# --- TR etiketleri ve saha ipuÃ§larÄ± ---
TR_LABEL = {
    "assault":   "SaldÄ±rÄ±",
    "burglary":  "Konut/Ä°ÅŸyeri HÄ±rsÄ±zlÄ±ÄŸÄ±",
    "theft":     "HÄ±rsÄ±zlÄ±k",
    "robbery":   "Soygun",
    "vandalism": "Vandalizm",
}
CUE_MAP = {
    "assault":   ["bar/eÄŸlence Ã§Ä±kÄ±ÅŸlarÄ±", "meydan/park gÃ¶zetimi"],
    "robbery":   ["metro/otobÃ¼s duraÄŸÄ± & ATM", "dar sokak giriÅŸ/Ã§Ä±kÄ±ÅŸ"],
    "theft":     ["otopark ve araÃ§ park alanlarÄ±", "bagaj/bisiklet kilidi"],
    "burglary":  ["arka sokak & yÃ¼kleme kapÄ±larÄ±", "kapanÄ±ÅŸ sonrasÄ± iÅŸyerleri"],
    "vandalism": ["okul/park/altgeÃ§it", "inÅŸaat sahasÄ± kontrolÃ¼"],
}

def actionable_cues(top_types: list[tuple[str, float]], max_items: int = 3) -> list[str]:
    tips: list[str] = []
    for crime, _ in top_types[:2]:
        tips.extend(CUE_MAP.get(crime, [])[:2])
    seen, out = set(), []
    for t in tips:
        if t not in seen:
            seen.add(t); out.append(t)
        if len(out) >= max_items:
            break
    return out

def confidence_label(q10: float, q90: float) -> str:
    width = q90 - q10
    if width < 0.18: return "yÃ¼ksek"
    if width < 0.30: return "orta"
    return "dÃ¼ÅŸÃ¼k"

def risk_window_text(start_iso: str, horizon_h: int) -> str:
    start = datetime.fromisoformat(start_iso)
    hours = np.arange(horizon_h)
    diurnal = 1.0 + 0.4 * np.sin((((start.hour + hours) % 24 - 18) / 24) * 2 * np.pi)
    if diurnal.size == 0:
        t2 = start
    else:
        thr = np.quantile(diurnal, 0.75)
        hot = np.where(diurnal >= thr)[0]
        if len(hot) == 0:
            t2 = start + timedelta(hours=horizon_h)
            return f"{start:%H:%M}â€“{t2:%H:%M}"
        splits = np.split(hot, np.where(np.diff(hot) != 1)[0] + 1)
        seg = max(splits, key=len)
        t1 = start + timedelta(hours=int(seg[0]))
        t2 = start + timedelta(hours=int(seg[-1]) + 1)
        t_peak = start + timedelta(hours=int(seg[len(seg)//2]))
        return f"{t1:%H:%M}â€“{t2:%H:%M} (tepe â‰ˆ {t_peak:%H:%M})"
    return f"{start:%H:%M}â€“{t2:%H:%M}"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ PALET / RENK EÅžLEYÄ°CÄ° â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# -*- coding: utf-8 -*-
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ PALET / RENK EÅžLEYÄ°CÄ° (REVÄ°ZE) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 5'li skala (en kapsamlÄ±)
PALETTE_5: dict[str, str] = {
    "Ã‡ok YÃ¼ksek": "#b10026",  # koyu kÄ±rmÄ±zÄ±
    "YÃ¼ksek":     "#e31a1c",  # kÄ±rmÄ±zÄ±
    "Orta":       "#fc8d59",  # turuncu
    "DÃ¼ÅŸÃ¼k":      "#74add1",  # mavi
    "Ã‡ok DÃ¼ÅŸÃ¼k":  "#a6cee3",  # aÃ§Ä±k mavi
}

# 4'lÃ¼ skala
PALETTE_4: dict[str, str] = {
    "Ã‡ok YÃ¼ksek": "#b10026",
    "YÃ¼ksek":     "#e31a1c",
    "Orta":       "#fc8d59",
    "DÃ¼ÅŸÃ¼k":      "#1f77b4",
}

# 3'lÃ¼ skala (geriye uyumluluk)
PALETTE_3: dict[str, str] = {
    "YÃ¼ksek": "#d62728",
    "Orta":   "#ff7f0e",
    "DÃ¼ÅŸÃ¼k":  "#1f77b4",
}

# Not: BazÄ± modeller "Ã‡ok Hafif/Hafif" Ã¼retir.
# Bu blokta bunlarÄ± "Ã‡ok DÃ¼ÅŸÃ¼k/DÃ¼ÅŸÃ¼k" ile eÅŸliyoruz (renk karÅŸÄ±lÄ±ÄŸÄ± hazÄ±r).
_TIER_ALIASES: dict[str, str] = {
    # yÃ¼ksek aile
    "cok yuksek": "Ã‡ok YÃ¼ksek", "Ã§ok yÃ¼ksek": "Ã‡ok YÃ¼ksek",
    "yuksek":     "YÃ¼ksek",     "yÃ¼ksek":     "YÃ¼ksek",
    # orta
    "orta":       "Orta",
    # dÃ¼ÅŸÃ¼k aile (iki terminolojiyi tekleÅŸtir)
    "dusuk":      "DÃ¼ÅŸÃ¼k",      "dÃ¼ÅŸÃ¼k":      "DÃ¼ÅŸÃ¼k",
    "hafif":      "DÃ¼ÅŸÃ¼k",      # â‰ˆ DÃ¼ÅŸÃ¼k
    "cok hafif":  "Ã‡ok DÃ¼ÅŸÃ¼k",  "Ã§ok hafif":  "Ã‡ok DÃ¼ÅŸÃ¼k",
    "cok dusuk":  "Ã‡ok DÃ¼ÅŸÃ¼k",  "Ã§ok dÃ¼ÅŸÃ¼k":  "Ã‡ok DÃ¼ÅŸÃ¼k",
}

def _normalize_tier(t: str | None) -> str | None:
    """Etiketi normalize et (aksan/kÃ¼Ã§Ã¼k-bÃ¼yÃ¼k/boÅŸluk farklÄ±lÄ±klarÄ±na dayanÄ±klÄ±)."""
    if t is None:
        return None
    key = str(t).strip()
    low = key.lower()
    return _TIER_ALIASES.get(low, key)

def _pick_palette_from_labels(labels: list[str]) -> dict[str, str]:
    """
    DataFrame'deki etiketlere gÃ¶re en uygun paleti seÃ§.
    Ã–ncelik: 5'li â†’ 4'lÃ¼ â†’ 3'lÃ¼.
    """
    norm = {_normalize_tier(x) for x in labels if x is not None}
    if {"Ã‡ok DÃ¼ÅŸÃ¼k", "DÃ¼ÅŸÃ¼k", "Orta", "YÃ¼ksek", "Ã‡ok YÃ¼ksek"}.issubset(norm):
        return PALETTE_5
    if {"DÃ¼ÅŸÃ¼k", "Orta", "YÃ¼ksek", "Ã‡ok YÃ¼ksek"}.issubset(norm):
        return PALETTE_4
    return PALETTE_3

def color_for_tier(tier: str, palette: dict[str, str] | None = None) -> str:
    """
    Tier â†’ HEX renk. Palet belirtilmezse birleÅŸik havuzdan bakar,
    eÅŸleÅŸme yoksa aÃ§Ä±k mavi (#9ecae1) dÃ¶ner.
    """
    pal_merged: dict[str, str] = {**PALETTE_5, **PALETTE_4, **PALETTE_3}
    pal = palette or pal_merged
    t = _normalize_tier(tier)
    return pal.get(t, "#9ecae1")
    
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SONUÃ‡ KARTI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def render_result_card(df_agg: pd.DataFrame, geoid: str, start_iso: str, horizon_h: int):
    if df_agg is None or df_agg.empty or geoid is None:
        st.info("BÃ¶lge seÃ§ilmedi."); return
    row = df_agg.loc[df_agg[KEY_COL] == geoid]
    if row.empty:
        st.info("SeÃ§ilen bÃ¶lge iÃ§in veri yok."); return
    row = row.iloc[0].to_dict()

    nr = float(row.get("nr_boost", 0.0))
    type_lams = {t: float(row.get(t, 0.0)) for t in CRIME_TYPES}
    type_probs = {TR_LABEL.get(t, t): 1.0 - math.exp(-lam) for t, lam in type_lams.items()}
    probs_sorted = sorted(type_probs.items(), key=lambda x: x[1], reverse=True)

    pi90_lines: list[str] = []
    for name_tr, _ in probs_sorted[:2]:
        t_eng = next((k for k, v in TR_LABEL.items() if v == name_tr), None)
        if t_eng is None: continue
        lam = type_lams.get(t_eng, 0.0)
        lo, hi = pois_pi90(lam)
        pi90_lines.append(f"{name_tr}: {lam:.1f} ({lo}â€“{hi})")

    q10 = float(row.get("q10", 0.0))
    q90 = float(row.get("q90", 0.0))
    conf_txt = confidence_label(q10, q90)
    win_text = risk_window_text(start_iso, horizon_h)

    subheader_with_help("ðŸ§­ SonuÃ§ KartÄ±", "SeÃ§ilen hÃ¼cre iÃ§in Ã¶zet risk ve pratik ipuÃ§larÄ±")
    c1, c2, c3 = st.columns([1.0, 1.2, 1.2])

    with c1:
        st.metric("BÃ¶lge (GEOID)", geoid)
        st.metric("Ã–ncelik", str(row.get("tier", "â€”")))
        st.metric("Ufuk", f"{horizon_h} saat")

    with c2:
        st.markdown("**En olasÄ± suÃ§ tÃ¼rleri (Pâ‰¥1)**")
        for name_tr, p in probs_sorted[:5]:
            st.write(f"- {name_tr}: {p:.2f}")

    with c3:
        st.markdown("**Beklenen sayÄ±lar (90% PI)**")
        for line in pi90_lines:
            st.write(f"- {line}")

    st.markdown("---")

    top2 = [name for name, _ in probs_sorted[:2]]
    st.markdown(f"**Top-2 Ã¶neri:** {', '.join(top2) if top2 else 'â€”'}")

    try:
        top_types_eng = []
        for name_tr, _ in probs_sorted[:2]:
            t_eng = next((k for k, v in TR_LABEL.items() if v == name_tr), None)
            if t_eng:
                top_types_eng.append((t_eng, type_lams.get(t_eng, 0.0)))
        cues = actionable_cues(top_types_eng, max_items=3)
    except Exception:
        cues = []

    if nr > 0:
        st.markdown(
            f"- **Near-repeat etkisi:** {nr:.2f} (0=etki yok, 1=yÃ¼ksek). "
            "Taze olay Ã§evresinde kÄ±sa ufukta risk artar."
        )

    st.markdown(f"- **Risk penceresi:** {win_text}")
    st.markdown(f"- **GÃ¼ven:** {conf_txt} (q10={q10:.2f}, q90={q90:.2f})")

    if cues:
        st.markdown("**KolluÄŸa Ã¶neriler:**")
        for c in cues:
            st.write(f"- {c}")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ HARÄ°TA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def build_map_fast(
    df_agg: pd.DataFrame,
    geo_features: list,
    geo_df: pd.DataFrame,
    show_popups: bool = False,
    patrol: Dict | None = None,
    *,
    show_poi: bool = False,
    show_transit: bool = False,
    show_hotspot: bool = False,
    show_temp_hotspot: bool = False,
    temp_hotspot_points: pd.DataFrame | None = None,
    selected_type: str | None = None,
    perm_hotspot_mode: str = "markers",  # "markers" | "heat"
    show_anomaly: bool = False,
    base_metric_for_anom: str | None = None,
    temp_scores_col: str = "hotspot_score",
    anom_thr: float = 0.25,
    add_layer_control: bool = True,
    risk_layer_show: bool = True,
    perm_hotspot_show: bool = True,
    temp_hotspot_show: bool = True,
    risk_layer_name: str = "Tahmin (risk)",
    perm_hotspot_layer_name: str = "Hotspot (kalÄ±cÄ±)",
    temp_hotspot_layer_name: str = "Hotspot (geÃ§ici)",
) -> "folium.Map":
    # Base map: custom TileLayer to keep attribution visible
    m = folium.Map(location=[37.7749, -122.4194], zoom_start=12, tiles=None)
    folium.TileLayer(
        tiles="CartoDB positron",
        name="cartodbpositron",
        control=True,
        attr='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> '
             'contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
    ).add_to(m)

    if df_agg is None or df_agg.empty:
        return m

    df_agg = df_agg.copy()
    df_agg[KEY_COL] = df_agg[KEY_COL].astype(str)

    # Dinamik paleti, df iÃ§indeki tier etiketlerinden seÃ§
    labels_present = sorted(map(str, df_agg.get("tier", pd.Series(dtype=str)).dropna().unique()))
    palette = _pick_palette_from_labels(labels_present)

    # HÃ¼cre stilleri & popup verisi
    color_map = {str(r[KEY_COL]): color_for_tier(str(r.get("tier", "")), palette) for _, r in df_agg.iterrows()}
    data_map  = df_agg.set_index(df_agg[KEY_COL].astype(str)).to_dict(orient="index")

    # GeoJSON FeatureCollection
    features = []
    for feat in geo_features:
        f = json.loads(json.dumps(feat))  # derin kopya
        props = f.get("properties", {})
        if "id" not in props:
            if "geoid" in props: props["id"] = props["geoid"]
            elif "GEOID" in props: props["id"] = props["GEOID"]
            else: props["id"] = None
        gid = str(props.get("id")) if props.get("id") is not None else None
        row = data_map.get(gid)
        if row:
            expected = float(row.get("expected", 0.0))
            tier = str(row.get("tier", "â€”"))
            q10 = float(row.get("q10", 0.0)); q90 = float(row.get("q90", 0.0))
            types = {t: float(row.get(t, 0.0)) for t in (CRIME_TYPES or [])}
            top3 = sorted(types.items(), key=lambda x: x[1], reverse=True)[:3]
            top_html = "".join([f"<li>{t}: {v:.2f}</li>" for t, v in top3])
            props["popup_html"] = (
                f"<b>{gid}</b><br/>E[olay] (ufuk): {expected:.2f} â€¢ Ã–ncelik: <b>{tier}</b><br/>"
                f"<b>En olasÄ± 3 tip</b><ul style='margin-left:12px'>{top_html}</ul>"
                f"<i>Belirsizlik (saatlik ort.): q10={q10:.2f}, q90={q90:.2f}</i>"
            )
            props["expected"] = round(expected, 2)
            props["tier"] = tier
        f["properties"] = props
        features.append(f)
    fc = {"type": "FeatureCollection", "features": features}

    # Style
    def style_fn(feat):
        gid_val = feat.get("properties", {}).get("id")
        gid = str(gid_val) if gid_val is not None else None
        return {"fillColor": color_map.get(gid, "#9ecae1"),
                "color": "#666666", "weight": 0.3, "fillOpacity": 0.55}

    # GeoJson layer (tooltip/popup gÃ¼venli)
    tt = pp = None
    if show_popups:
        try:
            tt = folium.features.GeoJsonTooltip(
                fields=["id", "tier", "expected"],
                aliases=["GEOID", "Ã–ncelik", "E[olay]"], localize=True, sticky=False
            )
        except Exception:
            tt = None
        try:
            pp = folium.features.GeoJsonPopup(
                fields=["popup_html"], labels=False, parse_html=False, max_width=280
            )
        except Exception:
            pp = None

    fg_cells = folium.FeatureGroup(name=risk_layer_name, show=bool(risk_layer_show))
    try:
        folium.GeoJson(fc, style_function=style_fn, tooltip=tt, popup=pp).add_to(fg_cells)
    except Exception:
        folium.GeoJson(fc, style_function=style_fn).add_to(fg_cells)
    fg_cells.add_to(m)

    # ---------- POI / Transit overlay'leri ----------
    def _read_first_existing_csv(paths: list[str]) -> pd.DataFrame | None:
        for p in paths:
            try:
                return pd.read_csv(p)
            except Exception:
                continue
        return None

    if show_poi:
        try:
            poi_df = _read_first_existing_csv(["data/sf_pois_cleaned_with_geoid.csv", "data/poi.csv"])
            if poi_df is not None and not poi_df.empty:
                lat_col = "latitude" if "latitude" in poi_df.columns else ("lat" if "lat" in poi_df.columns else None)
                lon_col = "longitude" if "longitude" in poi_df.columns else ("lon" if "lon" in poi_df.columns else None)
                if lat_col and lon_col:
                    pts = _clean_latlon(poi_df, lat_col, lon_col).head(2000)
                    if not pts.empty:
                        fg_poi = folium.FeatureGroup(name="POI", show=True)
                        for _, r in pts.iterrows():
                            folium.CircleMarker(
                                location=[float(r[lat_col]), float(r[lon_col])],
                                radius=2, color="#3b82f6", fill=True, fill_color="#3b82f6",
                                fill_opacity=0.6, opacity=0.7,
                            ).add_to(fg_poi)
                        fg_poi.add_to(m)
        except Exception:
            pass

    if show_transit:
        try:
            bus_df = _read_first_existing_csv(
                ["data/sf_bus_stops_with_geoid.csv", "data/sf_bus_stops.csv", "data/transit_bus_stops.csv"]
            )
        except Exception:
            bus_df = None
        try:
            train_df = _read_first_existing_csv(
                ["data/sf_train_stops_with_geoid.csv", "data/sf_train_stops.csv", "data/transit_train_stops.csv"]
            )
        except Exception:
            train_df = None

        fg_tr = folium.FeatureGroup(name="Transit", show=True)

        if bus_df is not None and not bus_df.empty:
            blat = "latitude" if "latitude" in bus_df.columns else ("lat" if "lat" in bus_df.columns else None)
            blon = "longitude" if "longitude" in bus_df.columns else ("lon" if "lon" in bus_df.columns else None)
            if blat and blon:
                pts = _clean_latlon(bus_df, blat, blon).head(2000)
                for _, r in pts.iterrows():
                    folium.CircleMarker(
                        location=[float(r[blat]), float(r[blon])],
                        radius=1.6, color="#10b981", fill=True, fill_color="#10b981",
                        fill_opacity=0.55, opacity=0.6,
                    ).add_to(fg_tr)

        if train_df is not None and not train_df.empty:
            tlat = "latitude" if "latitude" in train_df.columns else ("lat" if "lat" in train_df.columns else None)
            tlon = "longitude" if "longitude" in train_df.columns else ("lon" if "lon" in train_df.columns else None)
            if tlat and tlon:
                pts = _clean_latlon(train_df, tlat, tlon).head(1500)
                for _, r in pts.iterrows():
                    folium.CircleMarker(
                        location=[float(r[tlat]), float(r[tlon])],
                        radius=2.2, color="#ef4444", fill=True, fill_color="#ef4444",
                        fill_opacity=0.6, opacity=0.75,
                    ).add_to(fg_tr)

        if len(getattr(fg_tr, "_children", {})) > 0:
            fg_tr.add_to(m)

    # === GeÃ§ici hotspot katmanÄ± ===
    if show_temp_hotspot and temp_hotspot_points is not None and not temp_hotspot_points.empty:
        try:
            cols = {c.lower(): c for c in temp_hotspot_points.columns}
            lat = cols.get("latitude") or cols.get("lat")
            lon = cols.get("longitude") or cols.get("lon")
            w   = cols.get("weight")
            if lat and lon:
                pts = temp_hotspot_points[[lat, lon] + ([w] if w else [])].copy()
                pts[lat] = pd.to_numeric(pts[lat], errors="coerce")
                pts[lon] = pd.to_numeric(pts[lon], errors="coerce")
                if w: pts[w] = pd.to_numeric(pts[w], errors="coerce").fillna(1.0)
                pts = pts.replace([np.inf, -np.inf], np.nan).dropna()
                fg_temp = folium.FeatureGroup(name=temp_hotspot_layer_name, show=bool(temp_hotspot_show))
                HeatMap(pts.values.tolist(), radius=16, blur=24, max_zoom=16).add_to(fg_temp)
                fg_temp.add_to(m)
        except Exception:
            pass

    # === KalÄ±cÄ± hotspot katmanÄ± ===
    if show_hotspot:
        try:
            metric_col = None
            if selected_type and selected_type in df_agg.columns: metric_col = selected_type
            elif "expected" in df_agg.columns: metric_col = "expected"
            if not metric_col: raise ValueError("KalÄ±cÄ± hotspot iÃ§in uygun metrik bulunamadÄ±.")

            if perm_hotspot_mode == "heat":
                centers = df_agg.merge(geo_df[[KEY_COL, "centroid_lat", "centroid_lon"]], on=KEY_COL, how="left")
                if not centers.empty:
                    w = centers[metric_col].clip(lower=0).to_numpy()
                    pts = centers[["centroid_lat", "centroid_lon"]].copy()
                    pts["weight"] = w
                    fg_perm_heat = folium.FeatureGroup(name=perm_hotspot_layer_name, show=bool(perm_hotspot_show))
                    HeatMap(pts[["centroid_lat", "centroid_lon", "weight"]].values.tolist(),
                            radius=24, blur=28, max_zoom=16).add_to(fg_perm_heat)
                    fg_perm_heat.add_to(m)
            else:
                thr = float(np.quantile(df_agg[metric_col].to_numpy(), 0.90))
                strong = df_agg[df_agg[metric_col] >= thr].merge(
                    geo_df[[KEY_COL, "centroid_lat", "centroid_lon"]], on=KEY_COL, how="left"
                )
                if not strong.empty:
                    fg_perm = folium.FeatureGroup(name=perm_hotspot_layer_name, show=bool(perm_hotspot_show))
                    for _, r in strong.iterrows():
                        folium.CircleMarker(
                            [float(r["centroid_lat"]), float(r["centroid_lon"])],
                            radius=4, color="#8b0000", fill=True, fill_color="#8b0000",
                            fill_opacity=0.5, opacity=0.8
                        ).add_to(fg_perm)
                    fg_perm.add_to(m)
        except Exception:
            pass

    # Anomali
    if show_anomaly and temp_scores_col in df_agg.columns:
        try:
            base_col = base_metric_for_anom or ("expected" if "expected" in df_agg.columns else None)
            if base_col:
                b = df_agg[base_col].to_numpy()
                t = df_agg[temp_scores_col].to_numpy()
                b_norm = (b - b.min()) / (b.max() - b.min() + 1e-12)
                t_norm = (t - t.min()) / (t.max() - t.min() + 1e-12)
                delta = t_norm - b_norm
                anom = df_agg.assign(_delta=delta)
                anom = anom[anom["_delta"] >= float(anom_thr)].merge(
                    geo_df[[KEY_COL, "centroid_lat", "centroid_lon"]], on=KEY_COL, how="left"
                )
                if not anom.empty:
                    fg_anom = folium.FeatureGroup(name="Anomali (geÃ§iciâ€“kalÄ±cÄ±)", show=True)
                    for _, r in anom.iterrows():
                        folium.CircleMarker(
                            [float(r["centroid_lat"]), float(r["centroid_lon"])],
                            radius=6, color="#000", fill=True, fill_color="#ffd60a", fill_opacity=0.85
                        ).add_to(fg_anom)
                    fg_anom.add_to(m)
        except Exception:
            pass

    # Katman kontrolÃ¼ (ikon halinde kapalÄ±)
    try:
        if add_layer_control:
            folium.LayerControl(
                collapsed=True,
                position="topright",
                autoZIndex=True
            ).add_to(m)
    except Exception:
        pass

    # Ãœst %1 uyarÄ±
    try:
        thr99 = float(np.quantile(df_agg["expected"].to_numpy(), 0.99))
        urgent = df_agg[df_agg["expected"] >= thr99].merge(
            geo_df[[KEY_COL, "centroid_lat", "centroid_lon"]], on=KEY_COL
        )
        for _, r in urgent.iterrows():
            folium.CircleMarker(
                location=[float(r["centroid_lat"]), float(r["centroid_lon"])],
                radius=5, color="#000", fill=True, fill_color="#ff0000",
            ).add_to(m)
    except Exception:
        pass

    # Devriye rotalarÄ±
    if patrol and patrol.get("zones"):
        for z in patrol["zones"]:
            try:
                folium.PolyLine(z["route"], tooltip=f"{z['id']} rota").add_to(m)
                folium.Marker(
                    [z["centroid"]["lat"], z["centroid"]["lon"]],
                    icon=folium.DivIcon(
                        html="<div style='background:#111;color:#fff;padding:2px 6px;border-radius:6px'>"
                             f" {z['id']} </div>"
                    ),
                ).add_to(m)
            except Exception:
                continue

    return m

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ GÃ¼n Ã— Saat IsÄ± Matrisi â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def render_day_hour_heatmap(agg: pd.DataFrame, start_iso: str | None = None, horizon_h: int | None = None):
    """
    - agg 'dow' ve 'hour' iÃ§eriyorsa direkt pivot.
    - DeÄŸilse ve start_iso & horizon_h verilmiÅŸse, toplam expectedâ€™Ä± diurnal profile gÃ¶re saatlere daÄŸÄ±tÄ±r.
    - Aksi halde 24 saatlik varsayÄ±lan bir daÄŸÄ±tÄ±m Ã¼retir.
    """
    if agg is None or agg.empty:
        st.caption("IsÄ± matrisi iÃ§in veri yok."); return

    if {"dow", "hour"}.issubset(agg.columns):
        mat = (
            agg.pivot_table(index="dow", columns="hour", values="expected", aggfunc="sum")
               .reindex(index=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"], fill_value=0.0)
               .reindex(columns=list(range(24)), fill_value=0.0)
        )
        st.dataframe(mat.round(2), use_container_width=True)
        tot = float(mat.values.sum())
        idx = np.unravel_index(np.argmax(mat.values), mat.shape)
        st.caption(f"Toplam beklenen: {tot:.2f} â€¢ En yoÄŸun hÃ¼cre: {mat.index[idx[0]]} {mat.columns[idx[1]]}: {mat.values[idx]:.2f}")
        return

    if start_iso is not None and horizon_h is not None:
        start = pd.to_datetime(start_iso)
        hours = np.arange(int(horizon_h))
        diurnal = 1.0 + 0.4 * np.sin((((start.hour + hours) % 24 - 18) / 24) * 2 * np.pi)
        w = diurnal / (diurnal.sum() + 1e-12)
        total_expected = float(agg["expected"].sum())

        dow_labels = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
        mat = pd.DataFrame(0.0, index=dow_labels, columns=[f"{h:02d}" for h in range(24)])
        for h, weight in enumerate(w):
            dt = start + timedelta(hours=int(h))
            mat.loc[dow_labels[dt.dayofweek], f"{dt.hour:02d}"] += total_expected * float(weight)

        st.dataframe(mat.round(2), use_container_width=True)
        idx = np.unravel_index(np.argmax(mat.values), mat.shape)
        st.caption(f"Toplam beklenen: {total_expected:.2f} â€¢ En yoÄŸun: {mat.index[idx[0]]} {mat.columns[idx[1]]}")
        return

    # Fallback: 24 saat varsayÄ±lan
    start = pd.Timestamp.utcnow()
    hours = np.arange(24)
    diurnal = 1.0 + 0.4 * np.sin((((start.hour + hours) % 24 - 18) / 24) * 2 * np.pi)
    w = diurnal / (diurnal.sum() + 1e-12)
    total_expected = float(agg["expected"].sum())

    dow_labels = ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
    mat = pd.DataFrame(0.0, index=dow_labels, columns=[f"{h:02d}" for h in range(24)])
    for h, weight in enumerate(w):
        dt = start + timedelta(hours=int(h))
        mat.loc[dow_labels[dt.dayofweek], f"{dt.hour:02d}"] += total_expected * float(weight)

    st.dataframe(mat.round(2), use_container_width=True)
    idx = np.unravel_index(np.argmax(mat.values), mat.shape)
    st.caption(f"Toplam beklenen: {total_expected:.2f} â€¢ En yoÄŸun: {mat.index[idx[0]]} {mat.columns[idx[1]]}")
